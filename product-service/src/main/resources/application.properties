server.port=0
spring.jpa.show-sql=true
spring.datasource.url=jdbc:mysql://localhost:3306/my_db?useSSL=false&serverTimezone=UTC
spring.datasource.username=bestuser
spring.datasource.password=bestuser
## S3service
cloud.aws.credentials.accessKey=
cloud.aws.credentials.secretKey=
cloud.aws.region.static=us-east-1
## discovery-server
spring.application.name=product-service
eureka.client.service-url.defaultzone=http://localhost:8761/eureka

spring.servlet.multipart.max-file-size=100MB
spring.servlet.multipart.max-request-size=100MB

## we could run many instances product-service with different id
eureka.instance.instance-id=${spring.application.name}:${random.value}

spring.kafka.consumer.bootstrap-servers=localhost:9092
spring.kafka.consumer.group-id=myGroup

## this property defined which offset(messages) after first connecting to do handle
spring.kafka.consumer.auto-offset-reset=earliest

## spring actuator
management.health.circuitbreakers.enabled=true
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always
## settings for circuit breaker
resilience4j.circuitbreaker.instances.productservice.registerHealthIndicator=true
resilience4j.circuitbreaker.instances.productservice.event-consumer-buffer-size=10
resilience4j.circuitbreaker.instances.productservice.slidingWindowType=COUNT_BASED
resilience4j.circuitbreaker.instances.productservice.slidingWindowSize=5
resilience4j.circuitbreaker.instances.productservice.failureRateThreshold=50
resilience4j.circuitbreaker.instances.productservice.waitDurationInOpenState=5s
resilience4j.circuitbreaker.instances.productservice.permittedNumberOfCallsInHalfOpenState=3
resilience4j.circuitbreaker.instances.productservice.automaticTransitionFromOpenToHalfOpenEnabled=true

#resilience4j.timelimiter.instances.inventory.timeout-duration=3s

## resilience4j retry properties
#resilience4j.retry.instances.inventory.max-attempts=3
#resilience4j.retry.instances.inventory.wait-duration.=5s

spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
#spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
spring.kafka.consumer.properties.spring.json.type.mapping=productBalance:com.russozaripov.productservice.event.Supply_product_DTO

spring.cache.type=simple